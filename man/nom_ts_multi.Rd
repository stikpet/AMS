% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singleNominal.R
\name{nom_ts_multi}
\alias{nom_ts_multi}
\title{Single Nominal - Test - Exact Multinomial}
\usage{
nom_ts_multi(data, field)
}
\arguments{
\item{data}{Dataframe to be used}

\item{field}{Specific field name (as string) from data frame}
}
\value{
pVal The p-value of the test

chi2Val The chi-square test statistic

pVal The p-value of the test (significance)
}
\description{
This function will perform an exact multinomial test
}
\details{
To calculate the exact multinomial test the following steps can be used.

Step 1: Determine the probability of the observed counts using the probability mass function of the multinomial distribution.

The formula for this is given by:
\deqn{\frac{n!}{\prod_{i=1}^{k}F_i}\times\prod_{i=1}^{k}\pi_i^{F_i}}
Where \eqn{n} is the total sample size, \eqn{k} the number of categories, \eqn{F_i} the frequency of the i-th category,
and \eqn{\pi_i} the expected proportion of the i-th category.

Step 2: Determine all possible permutations with repetition that create a sum equal to the sample size over the k-categories.

Step 3: Determine the probability of each of these permutations using the probability mass function of the multinomial distribution.

Step 4: Sum all probabilities found in step 3 that are equal or less than the one found in step 1.

Step 2 is quite tricky. We could create all possible permutations with replacement.
If our sample size is n and the number of categories is k, this gives \eqn{(n+1)^k} permutations.
The ‘+ 1’ comes from the option of 0 to be included. Most of these permutations will not sum to the sample size, so they can be removed.

If the expected probability for each category is the same, we could use another approach.
We could then create all possible combinations with replacement. This would give fewer results:
\deqn{\binom{n+k}{k}=\frac{(n+k)!}{n!k!}}
Again we can then remove the ones that don’t sum to the sample size. Then perform step 3,
but now multiply each by how many variations this can be arranged in. If for example we have 5 categories,
and a total sample size of 20, one possible combination is \link{2, 2, 3, 3, 10}.
This would be the same as  \link{2, 3, 3, 2, 10}, \link{2, 3, 10, 2, 3}, etc.
We could determine the count (frequency) of each unique score, so in the example 2 has a frequency of 2, 3 also and 10 only one.
Now the first 2 we can arrange in:
\deqn{\binom{5}{2}=\frac{5!}{(5-2)!2!}=10}
The 5 is our number of categories, the 2 the frequency. For the two 3’s we now have 5 – 2 = 3 spots left, so those can only be arranged in:
\deqn{\binom{3}{2}=\frac{3!}{(3-2)!2!}=3}
Combining these 3 with the 10 we had earlier gives 3×10=30 possibilities. The single 10 only can now go to one spot so that’s it.

In general, if we have k categories, m different values and F_i is the i-th frequency of those values, sorted from high to low, we get:
\deqn{\binom{k}{F_1}\prod_{i=2}^m\binom{k-\sum_{j=1}^{m-i+1}F_j}{F_j}=\binom{k}{F_1}\binom{k-F_1}{F_2}\binom{k-\sum{j=1}^{2}F_j}{F_3}…\binom{k-\sum_{j=1}^{m-1}F_j}{F_k}}
Where:
\deqn{\binom{a}{b}=\frac{a!}{(a-b)!b!}}
}
